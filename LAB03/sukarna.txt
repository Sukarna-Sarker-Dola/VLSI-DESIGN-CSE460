module pattern(clock, resetn, w, z);

input clock, resetn, w;
output z;
reg [2:0] y, Y;
parameter [2:0] S0=0, S1=1, S2=2, S3=3, S4=4, S5=5, S6=6, S7=7;

always @(w,y)
begin
	case(y)
	S0: if(w) Y = S1
		else Y = S0
	S1: if(w) Y = S2
		else Y = S5
	S2: if(w) Y = S3
		else Y = S5
	S3: if(w) Y = S4
		else Y = S5
	S4: if(w) Y = S4
		else Y = S5
	S5: if(w) Y = S1
		else Y = S6
	S6: if(w) Y = S7
		else Y = S0
	S7: if(w) Y = S2
		else Y = S5
	endcase
end

always @(posedge clock, negedge resetn)
begin
	if(resetn == 0) y <= S0;
	else y <= Y;
end

assign z = (y==S4) | (y==S7);

endmodule





module mealy (Clock, Resetn, w, z);

input Clock, Resetn, w;
output reg z;
reg y, Y;
parameter A = 0, B = 1;
// Define the next state and output combinational circuits
always @(w, y)
	case (y)
		A: 	if (w)
				begin
				z = 0;
				Y = B;
				end
			else
				begin
				z = 0;
				Y = A;
				end
		B: 	if (w)
				begin
				z = 1;
				Y = B;
				end
			else
				begin
				z = 0;
				Y = A;
				end
	endcase
	
// Define the sequential block
always @(negedge Resetn, posedge Clock)
	if (Resetn == 0) y <= A;
	else y <= Y;
endmodule





module moore (Clock, Resetn, w, z);

input Clock, Resetn, w;
output z;
reg [1:0] y, Y;
parameter [1:0] A = 2'b00, B = 2'b01, C = 2'b10;

// Define the next state combinational circuit
always @(w, y)
	case (y)
		A: 	if (w) Y = B;
			else Y = A;
		B: 	if (w) Y = C;
			else Y = A;
		C: 	if (w) Y = C;
			else Y = A;
		default: Y = 2'bxx;
	endcase

// Define the sequential block
always @(negedge Resetn, posedge Clock)
	if (Resetn == 0) y <= A;
	else y <= Y;

// Define output
assign z = (y == C);
endmodule
